================================================================
   ✅ Open-Set + RAG 重构完成
================================================================

【核心架构】

  Two-Pass Pipeline:
  
  Pass 1: 初始候选生成（Qwen-VL + Image）
    • 输入: 图片
    • 输出: 最多8个候选 + 视觉特征描述
    • JSON: {"candidates": [{"label":"...", "confidence":0.0~1.0}, ...], "visual_notes":"..."}
  
  Pass 2 (可选): RAG重排序（Qwen-VL + Text Only）
    • 输入: Pass 1候选 + 联网证据
    • 输出: Top-5 + 置信度 + 推理 + 证据
    • JSON: {"labels":[], "confidences":[], "reasoning":"...", "evidence":[]}

【关键变更】

  1. 移除受限词汇表 ✅
     • 删除 _CANON_VOCAB
     • 删除 _NORMALIZE
     • 删除 _extract_materials()
  
  2. 两遍识别流程 ✅
     • _analyze_qwen_pass1(image_path, lang)
       - 生成初始候选（最多8个）
       - 返回视觉特征描述
     
     • _analyze_qwen(image_path, lang, enable_web, web_k, web_lang)
       - 调用 Pass 1
       - 如果 enable_web=True: 联网检索 + Pass 2重排序
       - 如果 enable_web=False: 直接返回 Pass 1结果
  
  3. RAG 检索增强 ✅
     • 对Top-5候选进行联网检索
     • 获取搜索结果（snippets）
     • 构建证据上下文
     • Pass 2重排序基于证据
  
  4. 新的提示词 ✅
     • _build_prompt_pass1(lang)
       - 要求返回最多8个候选
       - JSON格式: candidates + visual_notes
       - 不使用受限词汇表
     
     • _build_prompt_pass2(candidates_str, visual_notes, evidence_str, lang)
       - 基于证据重排序
       - 返回Top-5 + reasoning + evidence

【数据流】

  用户上传图片 → 裁剪区域 → 点击识别
    ↓
  Pass 1: Qwen-VL 视觉识别
    • 输入: 图片 + Pass 1提示词
    • 输出: {"candidates": [最多8个], "visual_notes": "..."}
    ↓
  if enable_web == False:
    • 直接返回Pass 1的Top-5
    • materials = candidates[:5]
    • evidence = []
    ↓
  if enable_web == True:
    ↓
    联网检索（对Top-5候选）:
      • 搜索: "{label} 面料 材质 特性"
      • 获取: URLs + Snippets
      • 构建: evidence_map = {label: {urls, snippets}}
    ↓
    Pass 2: Qwen-VL 文本重排序
      • 输入: Pass 1候选 + visual_notes + evidence
      • 输出: {"labels": [Top-5], "confidences": [], "reasoning": "...", "evidence": [...]}
    ↓
    返回最终结果:
      {
        "materials": labels[:5],
        "confidence": confidences[:5],
        "description": reasoning,
        "engine": "cloud_qwen",
        "evidence": [{"label": "...", "urls": [...]}, ...]
      }
    ↓
  前端渲染:
    Engine: cloud_qwen + Web Search
    
    1. 小羊皮        ████████████░░░░░░░░ 55%
    2. PU皮革        ████░░░░░░░░░░░░░░░░ 20%
    3. 牛皮          ███░░░░░░░░░░░░░░░░░ 12%
    4. 涤纶          ██░░░░░░░░░░░░░░░░░░ 8%
    5. 尼龙          █░░░░░░░░░░░░░░░░░░░ 5%
    
    🔗 证据链接 / Evidence
      小羊皮:
        - https://baike.baidu.com/item/小羊皮
        - https://www.zhihu.com/question/...
      PU皮革:
        - https://baike.baidu.com/item/PU
    
    💡 解释 / Reasoning
      基于视觉特征和联网证据，小羊皮的可能性最高，
      因为表面纹理细腻且有自然光泽。PU皮革和牛皮
      也有一定可能性，但光泽度和质感略有差异。

【函数签名】

  _build_prompt_pass1(lang: str = "zh") -> str
    • 第一遍提示词
    • 不使用受限词汇表
    • 要求最多8个候选

  _build_prompt_pass2(
      candidates_str: str,
      visual_notes: str,
      evidence_str: str,
      lang: str = "zh"
  ) -> str
    • 第二遍提示词
    • 基于证据重排序
    • 返回Top-5

  _analyze_qwen_pass1(image_path: str, lang: str = "zh") -> Dict
    • 第一遍识别
    • 返回: {"candidates": [...], "visual_notes": "..."}

  _analyze_qwen(
      image_path: str,
      lang: str = "zh",
      enable_web: bool = False,
      web_k: int = 4,
      web_lang: str = "zh"
  ) -> Dict
    • 完整流程
    • 返回: {"materials": [], "confidence": [], "description": "", "engine": "", "evidence": []}

  analyze_image(...) -> Dict
    • 公共 API
    • 引擎路由器

【JSON 格式】

  Pass 1 输出:
  {
    "candidates": [
      {"label": "小羊皮", "confidence": 0.55},
      {"label": "PU皮革", "confidence": 0.20},
      {"label": "牛皮", "confidence": 0.10},
      {"label": "涤纶", "confidence": 0.08},
      {"label": "尼龙", "confidence": 0.04},
      {"label": "棉", "confidence": 0.02},
      {"label": "混纺", "confidence": 0.01}
    ],
    "visual_notes": "表面有明显的细腻皮革纹理和自然光泽，质感柔软。"
  }

  Pass 2 输出:
  {
    "labels": ["小羊皮", "PU皮革", "牛皮", "涤纶", "尼龙"],
    "confidences": [0.55, 0.20, 0.12, 0.08, 0.05],
    "reasoning": "基于视觉特征和联网证据，小羊皮的可能性最高...",
    "evidence": [
      {"label": "小羊皮", "urls": ["url1", "url2"]},
      {"label": "PU皮革", "urls": ["url3"]}
    ]
  }

【错误处理】

  • Pass 1 JSON解析失败 → 返回空候选 + 原始文本
  • 联网检索失败 → 不影响主流程，跳过Pass 2
  • Pass 2 JSON解析失败 → 回退到Pass 1结果
  • 任何异常 → 回退到Pass 1结果

【性能优化】

  • @st.cache_data(ttl=3600) - 搜索结果缓存1小时
  • @st.cache_data(ttl=7200) - 推理结果缓存2小时
  • 搜索失败不阻塞主流程
  • 并行搜索多个候选

【UI 更新】

  • 证据格式改为: evidence = [{"label": "...", "urls": [...]}, ...]
  • 显示每个候选的证据链接
  • 分组显示：按面料名称分组证据

【验收清单】

  [✓] 移除受限词汇表
  [✓] 实现 Pass 1 提示词
  [✓] 实现 Pass 2 提示词
  [✓] 实现 _analyze_qwen_pass1()
  [✓] 实现 _analyze_qwen() (两遍流程)
  [✓] 联网检索集成
  [✓] RAG 重排序
  [✓] 错误处理和回退
  [✓] UI 更新（证据显示）
  [✓] 性能优化（缓存）

【对比】

  旧架构（单遍 + 受限词汇表）:
    • 单次 API 调用
    • 受限于40+词汇
    • 无联网验证
    • Top-3 输出

  新架构（两遍 + RAG）:
    • Pass 1: 视觉识别（最多8个候选）
    • 联网检索（Top-5候选）
    • Pass 2: 基于证据重排序
    • 开放集识别（任意面料名称）
    • Top-5 输出 + 证据链接

【优势】

  1. 开放集识别 ⭐⭐⭐⭐⭐
     • 不受词汇表限制
     • 支持专业术语
     • 更准确的识别

  2. RAG 增强 ⭐⭐⭐⭐⭐
     • 联网验证候选
     • 基于证据重排序
     • 提高可信度

  3. 鲁棒性 ⭐⭐⭐⭐⭐
     • 多层回退机制
     • 搜索失败不影响主流程
     • JSON 解析容错

  4. 可扩展性 ⭐⭐⭐⭐⭐
     • 清晰的两遍架构
     • 易于添加更多证据源
     • 易于调整检索策略

  5. 用户体验 ⭐⭐⭐⭐⭐
     • Top-5 提供更多选择
     • 证据链接增加透明度
     • 推理文本解释重排序

================================================================
   🎉 Open-Set + RAG 重构完成！
================================================================

更新时间: 2025-10-24
版本: 9.0 (Open-Set + RAG)
状态: ✅ 已实现并验证

